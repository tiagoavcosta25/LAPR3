@startuml
autonumber
actor "Administrator" as ADMIN

participant ":RegisterCourierUI" as UI
participant ":RegisterCourierController" as CTRL
participant "PotApplication" as PA
participant "app \n:PotApplication" as APA
participant "session \n:UserSession" as US
participant "plat \n:Platform" as PLAT
participant "courReg \n:CourierRegistration" as RF
participant "courier: Courier" as CR
participant "address \n:Address" as AD
participant "courierDB \n:CourierDB" as DB



activate ADMIN

ADMIN -> UI : initializes the register of a new Courier
activate UI
UI -> ADMIN : asks for the data that features the Courier (i.e., name, e-mail, NIF, bank account (IBAN) and address)
deactivate UI

ADMIN -> UI : inserts the required data
activate UI
UI -> CTRL : newCourier(id, name,email, nif, iban, address)
activate CTRL
CTRL -> PA : app = getInstance()
activate PA
deactivate PA
CTRL -> APA : plat = getPlatform()
activate APA
deactivate APA
CTRL -> APA : session = getCurrentSession()
activate APA
deactivate APA
CTRL -> US : email = getUserEmail()
activate US
deactivate US
CTRL -> PLAT : courReg = getCourReg()
activate PLAT
deactivate PLAT
CTRL -> PLAT : courierDB = getCourDB()
activate PLAT
deactivate PLAT
CTRL -> RF : newCourier(name, nif, email, iban, address)
activate RF
RF -> RF : id = generateCourierId()
RF -> CR ** : create(id, name, email, nif, iban, address)
activate CR
CR -> AD** : create(address)
deactivate CR
deactivate RF
deactivate CTRL


UI -> ADMIN : validates, presents the data and asks for a confirmation
deactivate UI

ADMIN -> UI : confirms
activate UI
UI -> CTRL : registersCourier()
activate CTRL
CTRL -> RF : registersCourier(courier)
activate RF
RF -> DB : addCourier(courier)
activate DB
deactivate DB
UI -> ADMIN : informs the success of the operation
deactivate RF
deactivate CTRL
deactivate UI

deactivate ADMIN

@enduml
