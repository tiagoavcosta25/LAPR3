@startuml
autonumber
actor "Admin" as ADMIN

participant ":RegisterDroneUI" as UI
participant ":RegisterDroneController" as CTRL
participant "pharmServ \n:PharmacyService" as PHS
participant "pharmDB \n:PharmacyDB" as PHDB
participant "droneServ \n:DroneService" as DS
participant "droneDB \n:DroneDB" as DDB
participant "drone \n:Drone" as D

activate ADMIN

ADMIN -> UI : initializes the register of a new drone
activate UI
UI -> CTRL : showPharmacies()
activate CTRL
CTRL -> PHS ** : create()
activate PHS
PHS -> PHDB ** : create()
deactivate PHS
CTRL -> PHS : lstPharmacies = getPharmacies()
activate PHS
PHS -> PHDB : lstPharmacies = getPharmacies()
activate PHDB
ref over PHDB
SD_CONNECTIONS
end ref
deactivate PHDB
deactivate PHS
deactivate CTRL
UI -> ADMIN : Shows the list of pharmacies and asks to choose one
deactivate UI

ADMIN -> UI : Chooses the pharmacy
activate UI
UI -> ADMIN : asks for the data that features the drone (i.e., battery, \nbattery capacity, maximum weight, status, potency)
deactivate UI

ADMIN -> UI : inserts the required data
activate UI
UI -> CTRL : newDrone(batteryPerc, chargingStatus,\n potency, weight, batteryCapacity, maxPayload, pharmacyId)
activate CTRL

CTRL -> DS : create()
activate DS
DS -> DDB ** : create()
deactivate DS

CTRL -> DS : newScooter(batteryPerc, chargingStatus, potency, weight, batteryCapacity, maxPayload, pharmacyId)
activate DS
DS -> D ** : create(batteryPerc, chargingStatus,\n potency, weight, batteryCapacity, maxPayload, pharmacyId)
deactivate DS
deactivate CTRL


UI -> ADMIN : validates, presents the data and asks for a confirmation
deactivate UI

ADMIN -> UI : confirms
activate UI
UI -> CTRL : registersDrone()
activate CTRL
CTRL -> DS : registersDrone(drone)
activate DS
DS -> DDB : registersDrone(drone)
activate DDB
ref over DDB
SD_Connections
end ref
deactivate DDB
deactivate DS
deactivate CTRL
UI -> ADMIN : informs the success of the operation
deactivate UI

deactivate ADMIN

@enduml
