@startuml
skinparam classAttributeIconSize 0

package "UI" #DDDDDD {
class MakeAnOrderUI{
}
}


package "Controller" #DDDDDD {
class MakeAnOrderController{
+newOrder(amount, totalWeight, additionalFee, orderDate, description, status, latitude,
longitude, streetName, doorNumber, postalCode, locality, country, products)
+registerOrder()
+getAvailableProducts(pharmacyId)
+getPharmacies()
+addProductToOrder(product, quantity)
}

class ApplicationPOT
{
  +static getInstance()
  +getPlatform()
}

class UserSession
{
  +getCurrentSession()
}
}

database Database{
}


package "Model" #DDDDDD {
package "Service" #DDDDDD {

  class OrderService{
       +OrderService()
       +addPharmacy(address, amount, additionalFee, dateOrder, description, mapProducts, client)
       +registerOrder(order)
  }

  class PharmacyService{
          +PharmacyService()
          +getPharmacies()
  }

  class ProductService{
          +ProductService()
          +getAvailableProducts(pharmacyId)
  }
  class ClientService{
        +ClientService()
        +getClientByEmail(email)
  }
 }
}

package "Model" #DDDDDD {
abstract class User{
-   String name
-   String email
-   String password
-   Integer nif
}

class Client{
-int IBAN;
-long creditCardNumber
-Address address
-int validityDate
-int CCV
+addCredits(addtionalCredits)
}

class Address{
-   String streetName
-   String doorNumber
-   String postalCode
-   String locality
-   String country
-   float longitude
-   float latitude
+create(streetName,doorNumber,locality,country,longitude,longitude)
}

class Order{
-   int id
-   float amount
-   float totalWeight
-   float additionalFee
-   Date orderDate
-   String description
-   String status
+create(amount, additionalFee, dateOrder, description, mapProducts, client, streetName,doorNumber,locality,country,longitude,longitude)
}

class Product{
-   int id
-   String name
-   String description
-   float unitaryPrice
-   float unitaryWeight
}

class Pharmacy{
-   int id
-   String name
}

}


package "Data" #DDDDDD {
class DataHandler{
    +openConnection()
    +closeAll()
}

class PharmacyDB{
          +PharmacyDB()
          +getPharmacies()
      }

class OrderDB{
       +OrderDB()
       +registerOrder(order)
  }

class ProductDB{
          +ProductDB()
          +getAvailableProducts(pharmacyId)
  }

class ClientDB{
        +ClientDB()
        +getClientByEmail(email)
  }
}

class PharmacyDB extends DataHandler
class ProductDB extends DataHandler
class ClientDB extends DataHandler
class OrderDB extends DataHandler
class Client extends User

MakeAnOrderUI ..> MakeAnOrderController
MakeAnOrderController ..> ApplicationPOT
MakeAnOrderController ..> UserSession
MakeAnOrderController ..> ClientService
MakeAnOrderController ..> ProductService
MakeAnOrderController ..> OrderService
MakeAnOrderController ..> PharmacyService
Database "1" -- "*" Client : has registered >
Database "1" -- "*" Order : has registered >
Database "1" -- "*" Product : has registered >
Database "1" -- "*" Address : has registered >
PharmacyDB -- Database : manages >
ClientDB -- Database : manages >
OrderDB -- Database : manages >
ProductDB -- Database : manages >
PharmacyService "1" --> "*" Pharmacy : manages services of
PharmacyService "1" --> "1" PharmacyDB : uses
OrderService "1" --> "*" Order : manages services of
OrderService "1" --> "1" OrderDB : uses
ClientService "1" --> "*" Client : manages services of
ClientService "1" --> "1" ClientDB : uses
ProductService "1" --> "*" Product : manages services of
ProductService "1" --> "1" ProductDB : uses

Order "1" -- "*" Product : has >
Order "1" -- "1" Pharmacy : has >
Client "1" -- "1" Order : makes >
Client "1" -- "1" Address : has >
Order "1" -- "1" Address : has >

@enduml