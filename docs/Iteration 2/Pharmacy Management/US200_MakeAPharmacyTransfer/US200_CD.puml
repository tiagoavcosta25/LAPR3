@startuml
skinparam classAttributeIconSize 0

package "Controller" #DDDDDD {
class MakeAPharmacyTransferController{
+newPharmacy(managerName,email,password, nif, name,latitude,longitude,\nstreetName,doorNumber,postalCode,locality,country)
+registerPhamacy()
}

class ApplicationPOT
{
  +static getInstance()
  +getPlatform()
}
}


package "Model" #DDDDDD {
class Platform {
  -String designation
  +getPharmacyReg()
}
package "Registration" #DDDDDD {

   class PharmacyRegistration{
          +getClosestPharmacyWithStock(pharmacy, product, quantity)
          +addPharmacyTransfer(order, product, quantity, nearbyPharamcy)
          +registersPharmacyTransfer(pharmacyTransfer)
      }
 }
}

package "Model" #DDDDDD {
abstract class User{
-String email
-String password
-String name
-Integer nif
}

class Client{
-   int IBAN
-   long creditCardNumber
-   int validityDate
-   int CCV
}

class Address{
-   String streetName
-   String doorNumber
-   String postalCode
-   String locality
-   String country
-   float longitude
-   float latitude
}

class Pharmacy{
-   int id
-   String name
-   PharmacyManager pharmacyManager
-   Address address
-   Map<Product, Integer> mapStock
}

class PharmacyManager{
}

class Order{
-   int id
-   float amount
-   float totalWeight
-   float additionalFee
-   Date orderDate
-   String description
-   String status
-   Map<Product, Integer> mapProducts
}

class Product{
-   int id
-   String name
-   String description
-   float unitaryPrice
-   float unitaryWeight
}

class PharmacyTransfer{
-   int id
-   Date transferDate
-   int quantity
-   Product product
-   Order orderDate
-   Pharmacy pharmacy
+create(order, product, quantity, nearbyPharamcy)
}

}


package "Data" #DDDDDD {
class DataHandler{
    +openConnection()
    +closeAll()
}

class PharmacyDB{
          +getClosestPharmacyWithStock(pharmacy, product, quantity)
          +registersPharmacyTransfer(pharmacyTransfer)
      }
}

class PharmacyDB extends DataHandler
class PharmacyManager extends User
class Client extends User

MakeAPharmacyTransferController ..> Platform
MakeAPharmacyTransferController ..> ApplicationPOT
PharmacyRegistration ..> PharmacyDB
Platform "1" --> "1" PharmacyRegistration : has
PharmacyRegistration "1" --> "*" Pharmacy : manages
Pharmacy "1" -- "1" Address : has >
Pharmacy "1" -- "1" PharmacyManager : has >
PharmacyManager "0..1" -- "1" User: acts as >
Pharmacy "1" -- "1" PharmacyManager : has >
Order "1" -- "*" Product : has >
Order "1" -- "*" Pharmacy : has >
Client "0..1" -- "1" User: acts as >
Client "1" -- "1" Order : makes >
Client "1" -- "1" Address : has >
Order "1" -- "1" Address : has >
PharmacyTransfer "1" -- "2" Pharmacy : has >
PharmacyTransfer "1" -- "1" Product : has >
PharmacyTransfer "1" -- "1" Order : has >

@enduml