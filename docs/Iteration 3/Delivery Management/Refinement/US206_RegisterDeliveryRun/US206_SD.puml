++@startuml
autonumber
hide footbox

actor "Admin" as U

participant "RegisterDeliveryRunUI" as UI
participant "RegisterDeliveryRunController" as CTRL
participant "ApplicationPOT" as _APP
participant "app\n:ApplicationPOT" as APP
participant "session\n:UserSession" as SESSION
participant "deliveryRunService\n:DeliveryRunService" as DRS
participant "graphService\n:GraphService" as GF
participant "pharmacyService\n:PharmacyService" as PS
participant "deliveryRunDB\n:DeliveryRunDB" as DB
participant "VehicleDB\n:VehicleDB" as GFDB
participant "pharmacyDB\n:PharmacyDB" as PDB
participant "deliveryRun\n:DeliveryRun" as DR
participant "status\n:DeliveryStatus" as DS

participant "courier\n:Courier" as C
participant "Order" as A

participant "DataHandler" as DH

activate U

U -> UI : Initiates the registration of a delivery run
activate UI







deactivate CTRL


UI --> U: Asks for a list of orders

deactivate UI




U -> UI : Gives an order list
activate UI
UI -> CTRL : registerDeliveryRun(lstOrder)
activate CTRL




CTRL -> DRS** : create()
activate DRS
DRS -> DB** : create()
deactivate DRS

CTRL -> GF** : create()
activate GF
GF -> GFDB** : create()
deactivate GF

CTRL -> PS** : create()
activate PS
PS -> PDB** : create()
deactivate PS


deactivate OS
CTRL -> _APP: app = getInstance()
activate _APP
deactivate _APP

CTRL -> APP : getCurrentSession()
activate APP
deactivate APP

CTRL -> SESSION : getRole()
activate SESSION
deactivate SESSION

alt if user is authorized (if it's an admin)


CTRL -> GF : lstPair = calculateBestVehicleAndBestPath(lstOrder)
activate GF
GF -> GFDB : lstPair = calculateBestVehicleAndBestPath(lstOrder)
activate GFDB
ref over GFDB
SD_CONNECTIONS
end ref
deactivate GF
deactivate GFDB


alt if model is not empty
CTRL -> DRS : model = getMostEfficientVehicleModel(lstPair)
activate DRS
deactivate DRS

alt if vehicle is a scooter


CTRL -> PS : courier = getSuitableCourier()
activate PS
PS -> PDB : getSuitableCourier()
activate PDB
ref over PDB
SD_CONNECTIONS
end ref
deactivate PS
deactivate PDB

CTRL -> DRS : vehicle = getMostChargedScooter()
activate DRS
DRS -> DB : vehicle = getMostChargedScooter()
activate DB
ref over DB
SD_CONNECTIONS
end ref
deactivate DRS
deactivate DB

else if vehicle is a drone

CTRL -> DRS : vehicle = getMostChargedDrone()
activate DRS
DRS -> DB : vehicle = getMostChargedDrone()
activate DB
ref over DB
SD_CONNECTIONS
end ref
deactivate DRS
deactivate DB

end

CTRL -> DRS : deliveryRun = newDeliveryRun(courier,lstOrder, vehicle)
activate DRS
DRS -> DR** : create(courier,lstOrder,vehicle)
activate DR
DR -> DS** : create()
deactivate DRS


deactivate DR

CTRL -> DRS : addNewDeliveryRun(deliveryRun)
activate DRS
DRS -> DB : addNewDeliveryRun(deliveryRun)
activate DB
deactivate DRS
ref over DB
SD_CONNECTIONS
end ref
deactivate DB


deactivate DB
deactivate DRS

deactivate CTRL

UI --> U : Registers the delivery run and informs\nabout the success of the operation
deactivate UI
end

else if User is not authorized or if model is empty


UI --> U : Informs about the unsuccess of\nthe operation
activate UI
deactivate UI
end








deactivate U


@enduml