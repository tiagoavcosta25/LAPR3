@startuml
autonumber
actor "Admin" as ADMIN

participant ":RegisterScooterUI" as UI
participant ":RegisterScooterController" as CTRL
participant "pharmServ\n:PharmacyService" as PHS
participant "pharmDB\n:PharmacyDB" as PHDB
participant "vehicleServ\n:VehicleService" as VS
participant "vehicleDB\n:VehicleDB" as VDB
participant "vehicleModel\n:VehicleModel" as VM
participant "battery\n:Battery" as B
participant "scootServ\n:ScooterService" as SS
participant "scootDB\n:ScooterDB" as SDB
participant "scoot\n:Scooter" as SC
participant "QRCode" as QR

activate ADMIN

ADMIN -> UI : initializes the register of a new scooter
activate UI
UI -> CTRL : showPharmacies()
activate CTRL
CTRL -> PHS ** : create()
activate PHS
PHS -> PHDB ** : create()
deactivate PHS
CTRL -> PHS : lstPharmacies = getPharmacies()
activate PHS
PHS -> PHDB : lstPharmacies = getPharmacies()
activate PHDB
ref over PHDB
SD_CONNECTIONS
end ref
deactivate PHDB
deactivate PHS
deactivate CTRL
UI -> ADMIN : Shows the list of pharmacies and asks to choose one
deactivate UI

ADMIN -> UI : Chooses the pharmacy
activate UI

UI -> CTRL : setPharmacy(pharmacyEmail)
activate CTRL
CTRL -> PHS : pharmacy = getPharmacy(pharmacyEmail)
activate PHS
PHS -> PHDB : pharmacy = getPharmacy(pharmacyEmail)
activate PHDB
ref over PHDB
SD_CONNECTIONS
end ref
deactivate PHDB
deactivate PHS
CTRL -> VS : create()
activate VS
VS -> VDB ** : create()
deactivate VS
deactivate CTRL

UI --> ADMIN : Presents the list of scooter models and asks to choose one or\ncreate a new model
deactivate UI
alt if the admin chooses an existing model
ADMIN -> UI : Chooses the model
activate UI
UI -> CTRL : setVehicleModel(designation)
activate CTRL
CTRL -> VS : model = getVehicleModel(designation)
activate VS
VS -> VDB : model = getVehicleModel(designation)
activate VDB
ref over VDB
SD_CONNECTIONS
end ref
deactivate VDB
deactivate VS
deactivate CTRL
deactivate UI
else if the admin chooses to create a new model
ADMIN -> UI : Chooses to create a new model
activate UI
UI --> ADMIN : Asks for the data that features the model (i.e., designation, potency, weight, maximum payload, battery capacity, \nbattery voltage, battery efficiency)
deactivate UI
ADMIN -> UI : Inserts the required data
activate UI

UI -> CTRL : newVehicleModel(designation, potency, weight, maxPayload,\nbatteryCapacity, batteryVoltage, efficiency)
activate CTRL

CTRL -> VS : model = newVehicleModel(designation, potency, weight, maxPayload,\nbatteryCapacity, batteryVoltage, efficiency)
activate VS
VS -> VM ** : create(designation, potency, weight, maxPayload,\nbatteryCapacity, batteryVoltage, efficiency)
activate VM
VM -> B ** : create(batteryCapacity, batteryVoltage, efficiency)
deactivate VM
deactivate VS
end alt
deactivate CTRL
UI -> CTRL : scooter = newScooter()
activate CTRL
CTRL -> SS : create()
activate SS
SS -> SDB ** : create()
deactivate SS

CTRL -> SS : scooter = newScooter(model, pharmacy)
activate SS
SS -> SC ** : create(model, pharmacy)
deactivate SS

CTRL -> VS : generateQRCode(scooter)
activate VS
VS -> QR : generateQRCode(data, path)
activate QR
deactivate QR
deactivate VS
deactivate CTRL

UI -> ADMIN : Shows the information about the scooter and its QR Code, requesting verification
deactivate UI

ADMIN -> UI : Confirms the information
activate UI
UI -> CTRL : registersScooter()
activate CTRL
CTRL -> SS : registersScooter(scooter)
activate SS
SS -> SDB : registersScooter(scooter)
activate SDB
ref over SDB
SD_CONNECTIONS
end ref
deactivate SDB
deactivate SS
deactivate CTRL
UI -> ADMIN : Informs the success of the operation.
deactivate UI

deactivate ADMIN

@enduml
