@startuml
autonumber
actor "Admin" as ADMIN

participant ":RemoveDroneUI" as UI
participant ":RemoveDroneController" as CTRL
participant "pharmServ \n:PharmacyService" as PHS
participant "pharmDB \n:PharmacyDB" as PHDB
participant "droneServ \n:DroneService" as DS
participant "droneDB \n:DroneDB" as DDB

activate ADMIN

ADMIN -> UI : Sends a request regarding the update of an drone's data
activate UI
UI -> CTRL : showPharmacies()
activate CTRL
CTRL -> PHS ** : create()
activate PHS
PHS -> PHDB ** : create()
deactivate PHS
CTRL -> PHS : lstPharmacies = getPharmacies()
activate PHS
PHS -> PHDB : lstPharmacies = getPharmacies()
activate PHDB
ref over PHDB
SD_CONNECTIONS
end ref
deactivate PHDB
deactivate PHS
deactivate CTRL
UI -> ADMIN : Shows the list of pharmacies and asks to choose one
deactivate UI

ADMIN -> UI : Chooses the pharmacy
activate UI
UI -> CTRL : showDroneList(pharmacyId)
activate CTRL
CTRL -> DS ** : create()
activate DS
DS -> DDB ** : create()
deactivate DS
CTRL -> DS : lstDrones = getDronesList(pharmacyId)
activate DS
DS -> DDB : lstDrones = getDronesList(pharmacyId)
activate DDB
ref over DDB
SD_CONNECTIONS
end ref
deactivate DDB
deactivate DS
deactivate CTRL
UI -> ADMIN : Shows the list of drones and asks to choose one
deactivate UI
ADMIN -> UI : Chooses the drone
activate UI

UI -> ADMIN : Shows the information about the drone, asking to update
deactivate UI

ADMIN -> UI : Updates the information
activate UI
UI -> CTRL : updateDrone(designation, potency, weight, maxPayload,\nbatteryCapacity, batteryVoltage, efficiency)
activate CTRL
CTRL -> DS : updateDrone(designation, potency, weight, maxPayload,\nbatteryCapacity, batteryVoltage, efficiency)
activate DS
DS -> DDB : updateDroneFromDB(designation, potency, weight, maxPayload,\nbatteryCapacity, batteryVoltage, efficiency)
activate DDB
ref over DDB
SD_CONNECTIONS
end ref
deactivate DDB
deactivate DS
deactivate CTRL
UI -> ADMIN : Validates all the information, informing of the success of the operation

deactivate UI

deactivate ADMIN

@enduml
