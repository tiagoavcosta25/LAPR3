@startuml
autonumber
actor "Admin" as ADMIN

participant ":RegisterDroneUI" as UI
participant ":RegisterDroneController" as CTRL
participant "pharmServ \n:PharmacyService" as PHS
participant "pharmDB \n:PharmacyDB" as PHDB
participant "vehicleServ \n:VehicleService" as VS
participant "vehicleDB \n:VehicleDB" as VDB
participant "vehicleModel \n:VehicleModel" as VM
participant "batt \n:Battery" as B
participant "droneServ \n:DroneService" as DS
participant "droneDB \n:DroneDB" as DDB
participant "drone \n:Drone" as D
participant "QRCode" as QR

activate ADMIN

ADMIN -> UI : initializes the register of a new drone
activate UI
UI -> CTRL : showPharmacies()
activate CTRL
CTRL -> PHS ** : create()
activate PHS
PHS -> PHDB ** : create()
deactivate PHS
CTRL -> PHS : lstPharmacies = getPharmacies()
activate PHS
PHS -> PHDB : lstPharmacies = getPharmacies()
activate PHDB
ref over PHDB
SD_CONNECTIONS
end ref
deactivate PHDB
deactivate PHS
deactivate CTRL
UI -> ADMIN : Shows the list of pharmacies and asks to choose one
deactivate UI

ADMIN -> UI : Chooses the pharmacy
activate UI

UI -> CTRL : setPharmacy(pharmacyEmail)
activate CTRL
CTRL -> PHS : pharmacy = getPharmacy(pharmacyEmail)
activate PHS
PHS -> PHDB : pharmacy = getPharmacy(pharmacyEmail)
activate PHDB
ref over PHDB
SD_CONNECTIONS
end ref
deactivate PHDB
deactivate PHS
CTRL -> VS : create()
activate VS
VS -> VDB ** : create()
deactivate VS
deactivate CTRL

UI --> ADMIN : Presents the list of drone models and asks to choose one or\ncreate a new model
deactivate UI
alt if the admin chooses an existing model
ADMIN -> UI : Chooses the model
activate UI
UI -> CTRL : setVehicleModel(designation)
activate CTRL
CTRL -> VS : model = getVehicleModel(designation)
activate VS
VS -> VDB : model = getVehicleModel(designation)
activate VDB
ref over VDB
SD_CONNECTIONS
end ref
deactivate VDB
deactivate VS
deactivate CTRL
deactivate UI
else if the admin chooses to create a new model
ADMIN -> UI : Chooses to create a new model
activate UI
UI --> ADMIN : Asks for the data that features the model (i.e., designation, potency, weight, maximum payload, battery capacity, \nbattery voltage, battery efficiency)
deactivate UI
ADMIN -> UI : Inserts the required data
activate UI

UI -> CTRL : newVehicleModel(designation, potency, weight, maxPayload,\nbatteryCapacity, batteryVoltage, efficiency)
activate CTRL

CTRL -> VS : create()
activate VS
VS -> VDB ** : create()
deactivate VS

CTRL -> VS : model = newVehicleModel(designation, potency, weight, maxPayload,\nbatteryCapacity, batteryVoltage, efficiency)
activate VS
VS -> VM ** : create(designation, potency, weight, maxPayload,\nbatteryCapacity, batteryVoltage, efficiency)
activate VM
VM -> B ** : create(batteryCapacity, batteryVoltage, efficiency)
deactivate VM
deactivate VS
end alt
deactivate CTRL
UI -> CTRL : drone = newDrone()
activate CTRL
CTRL -> DS : create()
activate DS
DS -> DDB ** : create()
deactivate DS

CTRL -> DS : newDrone(model, pharmacy)
activate DS
DS -> D ** : create(model, pharmacy)
deactivate DS

CTRL -> VS : generateQRCode()
activate VS
VS -> QR : generateQRCode(data, path)
activate QR
deactivate QR
deactivate VS
deactivate CTRL

UI -> ADMIN : Shows the information about the drone and its QR Code, requesting verification
deactivate UI

ADMIN -> UI : Confirms the information
activate UI
UI -> CTRL : registersDrone()
activate CTRL
CTRL -> DS : registersDrone(drone)
activate DS
DS -> DDB : registersDrone(drone)
activate DDB
ref over DDB
SD_Connections
end ref
deactivate DDB
deactivate DS
deactivate CTRL
UI -> ADMIN : Informs the success of the operation
deactivate UI

deactivate ADMIN

@enduml
